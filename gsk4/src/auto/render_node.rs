// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::ParseLocation;
use crate::RenderNodeType;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib::wrapper! {
    pub struct RenderNode(Object<ffi::GskRenderNode>);

    match fn {
        get_type => || ffi::gsk_render_node_get_type(),
    }
}

impl RenderNode {
    #[doc(alias = "gsk_render_node_deserialize")]
    pub fn deserialize(
        bytes: &glib::Bytes,
        error_func: Option<&mut dyn (FnMut(&ParseLocation, &ParseLocation, &glib::Error))>,
    ) -> Option<RenderNode> {
        assert_initialized_main_thread!();
        let error_func_data: Option<
            &mut dyn (FnMut(&ParseLocation, &ParseLocation, &glib::Error)),
        > = error_func;
        unsafe extern "C" fn error_func_func(
            start: *const ffi::GskParseLocation,
            end: *const ffi::GskParseLocation,
            error: *const glib::ffi::GError,
            user_data: glib::ffi::gpointer,
        ) {
            let start = from_glib_borrow(start);
            let end = from_glib_borrow(end);
            let error = from_glib_borrow(error);
            let callback: *mut Option<
                &mut dyn (FnMut(&ParseLocation, &ParseLocation, &glib::Error)),
            > = user_data as *const _ as usize
                as *mut Option<&mut dyn (FnMut(&ParseLocation, &ParseLocation, &glib::Error))>;
            if let Some(ref mut callback) = *callback {
                callback(&start, &end, &error)
            } else {
                panic!("cannot get closure...")
            };
        }
        let error_func = if error_func_data.is_some() {
            Some(error_func_func as _)
        } else {
            None
        };
        let super_callback0: &Option<
            &mut dyn (FnMut(&ParseLocation, &ParseLocation, &glib::Error)),
        > = &error_func_data;
        unsafe {
            from_glib_full(ffi::gsk_render_node_deserialize(
                bytes.to_glib_none().0,
                error_func,
                super_callback0 as *const _ as usize as *mut _,
            ))
        }
    }
}

pub const NONE_RENDER_NODE: Option<&RenderNode> = None;

pub trait RenderNodeExt: 'static {
    #[doc(alias = "gsk_render_node_draw")]
    fn draw(&self, cr: &cairo::Context);

    #[doc(alias = "gsk_render_node_get_bounds")]
    fn get_bounds(&self) -> graphene::Rect;

    #[doc(alias = "gsk_render_node_get_node_type")]
    fn get_node_type(&self) -> RenderNodeType;

    #[doc(alias = "gsk_render_node_serialize")]
    fn serialize(&self) -> Option<glib::Bytes>;

    #[doc(alias = "gsk_render_node_write_to_file")]
    fn write_to_file(&self, filename: &str) -> Result<(), glib::Error>;
}

impl<O: IsA<RenderNode>> RenderNodeExt for O {
    fn draw(&self, cr: &cairo::Context) {
        unsafe {
            ffi::gsk_render_node_draw(
                self.as_ref().to_glib_none().0,
                mut_override(cr.to_glib_none().0),
            );
        }
    }

    fn get_bounds(&self) -> graphene::Rect {
        unsafe {
            let mut bounds = graphene::Rect::uninitialized();
            ffi::gsk_render_node_get_bounds(
                self.as_ref().to_glib_none().0,
                bounds.to_glib_none_mut().0,
            );
            bounds
        }
    }

    fn get_node_type(&self) -> RenderNodeType {
        unsafe {
            from_glib(ffi::gsk_render_node_get_node_type(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn serialize(&self) -> Option<glib::Bytes> {
        unsafe {
            from_glib_full(ffi::gsk_render_node_serialize(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    fn write_to_file(&self, filename: &str) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::gsk_render_node_write_to_file(
                self.as_ref().to_glib_none().0,
                filename.to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

impl fmt::Display for RenderNode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("RenderNode")
    }
}
